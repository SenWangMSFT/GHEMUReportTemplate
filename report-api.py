#!/usr/bin/env python3
import os
import time
import datetime
import requests
import pandas as pd
from dotenv import load_dotenv

# ─── Configuration ─────────────────────────────────────────────────────────────
load_dotenv()
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
if not GITHUB_TOKEN:
    raise ValueError("GITHUB_TOKEN not set in environment")
HEADERS = {
    "Authorization": f"token {GITHUB_TOKEN}",
    "Accept": "application/vnd.github.v3+json"
}

# Replace with your enterprise slug
ENTERPRISE_SLUG = "YOUR_ENTERPRISE_SLUG"

# ─── Helper Functions ──────────────────────────────────────────────────────────
def paged_get(url, params=None):
    """GET a paginated GitHub REST endpoint, returning a combined list."""
    results = []
    while url:
        resp = requests.get(url, headers=HEADERS, params=params)
        resp.raise_for_status()
        items = resp.json()
        results.extend(items if isinstance(items, list) else [])
        link = resp.headers.get('Link', '')
        next_url = None
        if 'rel="next"' in link:
            for part in link.split(','):
                if 'rel="next"' in part:
                    next_url = part.split(';')[0].strip()[1:-1]
        url = next_url
        params = None
    return results


def to_excel_with_charts(dfs: dict, path="GitHub_Enterprise_Reports.xlsx"):
    """
    Write each DataFrame in dfs to its own sheet, embed charts, and apply clean, professional formatting:
      - Cover sheet with title and date
      - Workbook properties
      - Table styling (Table Style Medium 9), autofilter, freeze panes, column widths
      - Consistent header formatting and gridline hiding
    """
    with pd.ExcelWriter(path, engine="xlsxwriter") as writer:
        workbook = writer.book

        # ── WORKBOOK PROPERTIES ────────────────────────────────────────────
        workbook.set_properties({
            'title':    'GitHub Enterprise Reports',
            'subject':  'Usage & Activity Metrics',
            'author':   os.getenv("USER", "Automation Script"),
            'comments': 'Generated by to_excel_with_charts'
        })

        # ── COVER SHEET ─────────────────────────────────────────────────────
        cover = workbook.add_worksheet("Summary")
        title_fmt = workbook.add_format({'bold': True, 'font_size': 24})
        subtitle_fmt = workbook.add_format({'italic': True, 'font_size': 10})
        cover.write("A1", "GitHub Enterprise Reports", title_fmt)
        cover.write("A3", f"Generated: {datetime.date.today():%Y-%m-%d}", subtitle_fmt)
        cover.hide_gridlines(2)

        # common formats
        header_fmt = workbook.add_format({'bold': True, 'bg_color': '#DCE6F1', 'border': 1})
        cell_fmt   = workbook.add_format({'border': 1})

        # ── PERMISSIONS SHEET ─────────────────────────────────────────────
        df_perm = dfs.pop("Permissions")
        df_perm.to_excel(writer, sheet_name="Permissions", index=False, startrow=0)
        ws_perm = writer.sheets["Permissions"]
        end_row = len(df_perm)
        end_col = len(df_perm.columns) - 1
        ws_perm.add_table(0, 0, end_row, end_col, {
            'columns': [{'header': c} for c in df_perm.columns],
            'style':   'Table Style Medium 9'
        })
        ws_perm.set_column(0, end_col, 20)
        ws_perm.freeze_panes(1, 0)
        ws_perm.hide_gridlines(2)

        # chart data for Permissions
        perm_counts = df_perm['permission'].value_counts().to_dict()
        read_only = perm_counts.get('pull', 0)
        write_lvls = {p: perm_counts.get(p, 0) for p in ('admin','maintain','push','triage')}
        chart_rows = [
            ['Read‑Only', read_only, 0, 0, 0, 0],
            ['Write',     0, write_lvls['admin'], write_lvls['maintain'], write_lvls['push'], write_lvls['triage']],
        ]
        start = end_row + 3
        headers = ['Level','pull','admin','maintain','push','triage']
        ws_perm.write_row(start, 0, headers, header_fmt)
        for i,row in enumerate(chart_rows,1):
            ws_perm.write_row(start+i, 0, row, cell_fmt)
        chart = workbook.add_chart({'type':'column','subtype':'stacked'})
        for idx in range(1, len(headers)):
            chart.add_series({
                'name':       ['Permissions', start, idx],
                'categories': ['Permissions', start+1, 0, start+2, 0],
                'values':     ['Permissions', start+1, idx, start+2, idx],
            })
        chart.set_title({'name':'Permissions Breakdown'})
        chart.set_x_axis({'name':'Permission Level'})
        chart.set_y_axis({'name':'Count'})
        ws_perm.insert_chart('H2',chart,{'x_offset':10,'y_offset':10})

        # ── COMMITTERS SHEET ───────────────────────────────────────────────
        df_comm = dfs.pop("Committers")
        total_committers = len(df_comm)
        total_users = df_perm['user'].nunique()
        ws_comm = workbook.add_worksheet("Committers")
        writer.sheets["Committers"] = ws_comm

        # committers list table
        df_comm.to_excel(writer, sheet_name="Committers", index=False, startrow=0)
        ws_comm.add_table(0, 0, len(df_comm), 0, {
            'columns': [{'header': 'user'}],
            'style':   'Table Style Medium 9'
        })
        ws_comm.set_column(0, len(df_comm.columns) - 1, 20)
        ws_comm.freeze_panes(1, 0)
        ws_comm.hide_gridlines(2)

        # summary metrics below
        summary_start = len(df_comm) + 3
        summary = [['Metric','Count'], ['Committers', total_committers], ['Total Users', total_users]]
        ws_comm.write_row(summary_start, 0, summary[0], header_fmt)
        for i,row in enumerate(summary[1:],1):
            ws_comm.write_row(summary_start+i, 0, row, cell_fmt)

        # chart for committers
        chart2 = workbook.add_chart({'type':'column'})
        chart2.add_series({
            'name':'Counts',
            'categories':['Committers', summary_start+1, 0, summary_start+2, 0],
            'values':['Committers', summary_start+1, 1, summary_start+2, 1],
        })
        chart2.set_title({'name':'Committers vs Total Users'})
        chart2.set_x_axis({'name':'Metric'})
        chart2.set_y_axis({'name':'Count'})
        ws_comm.insert_chart('D2',chart2,{'x_offset':10,'y_offset':5})

        # ── INACTIVE SHEETS ───────────────────────────────────────────────
        for days in (180,90):
            key = f"Inactive_{days}d"
            df_inact = dfs.pop(key)
            ws_inact = workbook.add_worksheet(key)
            writer.sheets[key] = ws_inact

            # data table
            df_inact.to_excel(writer, sheet_name=key, index=False, startrow=0)
            ws_inact.add_table(0, 0, len(df_inact), 0, {
                'columns': [{'header': f'inactive_{days}d'}],
                'style':   'Table Style Medium 9'
            })
            ws_inact.set_column(0, len(df_inact) - 1, 25)
            ws_inact.freeze_panes(1, 0)
            ws_inact.hide_gridlines(2)

            # summary table below
            summary_start = len(df_inact) + 3
            summary = [['Metric','Count'], ['Total Users', total_users], [f'Inactive {days}d', len(df_inact)]]
            ws_inact.write_row(summary_start, 0, summary[0], header_fmt)
            for i,row in enumerate(summary[1:],1):
                ws_inact.write_row(summary_start+i, 0, row, cell_fmt)

            # chart
            chart = workbook.add_chart({'type':'column'})
            chart.add_series({
                'name':'Counts',
                'categories':[key, summary_start+1, 0, summary_start+2, 0],
                'values':[key, summary_start+1, 1, summary_start+2, 1],
            })
            chart.set_title({'name':f'Inactive (past {days} days)'})
            chart.set_x_axis({'name':'Metric'})
            chart.set_y_axis({'name':'Count'})
            ws_inact.insert_chart('D2',chart,{'x_offset':10,'y_offset':5})

        # ── STALE REPOS SHEET ─────────────────────────────────────────────
        df_stale = dfs.pop("Stale_Repos_6mo")
        ws_stale = df_stale.to_excel(writer, sheet_name="Stale Repos", index=False, startrow=0)
        ws_stale = writer.sheets["Stale Repos"]
        ws_stale.add_table(0, 0, len(df_stale), len(df_stale.columns)-1, {
            'columns': [{'header': c} for c in df_stale.columns],
            'style':   'Table Style Medium 9'
        })
        ws_stale.set_column(0, len(df_stale.columns)-1, 20)
        ws_stale.freeze_panes(1, 0)
        ws_stale.hide_gridlines(2)

    print(f"Wrote professional report to {path}")


# ─── Report Generators ─────────────────────────────────────────────────────────
def fetch_orgs():
    """
    List all the orgs your user belongs to.
    Requires read:org on your PAT.
    """
    return [o["login"] for o in paged_get("https://api.github.com/user/orgs", params={"per_page":100})]

def report_permissions(orgs):
    """
    Report: exact permission and level for each user per repo.
    Permissions: admin, maintain, push, triage, pull.
    Levels: Write (admin/maintain/push/triage) vs Read‑Only (pull).
    """
    hierarchy = ["admin", "maintain", "push", "triage", "pull"]
    rows = []
    seen = set()
    for org in orgs:
        repos = paged_get(f"https://api.github.com/orgs/{org}/repos", params={"per_page":100})
        for repo in repos:
            full = repo["full_name"]
            collabs = paged_get(repo["collaborators_url"].replace("{/collaborator}", ""), params={"per_page":100})
            for c in collabs:
                perm_dict = c.get("permissions", {})
                # determine highest permission
                exact = next((p for p in hierarchy if perm_dict.get(p, False)), "pull")
                level = exact if exact in {"admin","maintain","push","triage"} else "Read‑Only"
                rows.append({
                    "user": c["login"],
                    "repo": full,
                    "permission": exact,
                    "permission_level": level
                })
                seen.add(c["login"])
        time.sleep(0.5)
    try:
        members = paged_get(f"https://api.github.com/enterprises/{ENTERPRISE_SLUG}/members", params={"per_page":100})
        all_users = {m["login"] for m in members}
    except:
        all_users = seen
    for u in all_users - seen:
        rows.append({"user":u, "repo":"empty repo", "permission":"pull", "permission_level":"Read‑Only"})
    return pd.DataFrame(rows)

def report_committers(orgs):
    """
    Report: set of users who have committed to any repo (based on contributors stats).
    """
    committers = set()
    for org in orgs:
        repos = paged_get(f"https://api.github.com/orgs/{org}/repos", params={"per_page":100})
        for repo in repos:
            url = f"https://api.github.com/repos/{org}/{repo['name']}/stats/contributors"
            resp = requests.get(url, headers=HEADERS)
            if resp.status_code == 202:
                time.sleep(1)
                resp = requests.get(url, headers=HEADERS)
            if resp.status_code == 204:
                continue
            try:
                entries = resp.json() or []
            except ValueError:
                continue
            for e in entries:
                login = (e.get("author") or {}).get("login")
                if login:
                    committers.add(login)
            time.sleep(0.2)
    df = pd.DataFrame(sorted(committers), columns=["user"])
    # df["total_committers"] = len(df)
    return df

def report_inactive(orgs, days):
    """
    Report: users with no commit activity in the last days days.
    """
    cutoff = (datetime.datetime.utcnow() - datetime.timedelta(days=days)).isoformat() + "Z"
    active = set()
    for org in orgs:
        repos = paged_get(f"https://api.github.com/orgs/{org}/repos", params={"per_page":100})
        for repo in repos:
            resp = requests.get(
                f"https://api.github.com/repos/{org}/{repo['name']}/commits",
                headers=HEADERS,
                params={"since":cutoff, "per_page":100}
            )
            if resp.status_code != 200:
                continue
            for c in resp.json() or []:
                login = (c.get("author") or {}).get("login")
                if login:
                    active.add(login)
            time.sleep(0.2)
    all_users = set(report_permissions(orgs)["user"])
    inactive = sorted(all_users - active)
    return pd.DataFrame(inactive, columns=[f"inactive_{days}d"])

def report_stale_repos(orgs):
    """
    Report: count of non-archived repos not pushed to in the last 6 months.
    """
    cutoff = (datetime.datetime.utcnow() - datetime.timedelta(days=180)).isoformat() + "Z"
    rows = []
    for org in orgs:
        repos = paged_get(f"https://api.github.com/orgs/{org}/repos", params={"per_page":100})
        stale = [r for r in repos if r.get("pushed_at", "") < cutoff and not r.get("archived", False)]
        rows.append({"org":org, "stale_non_archived_repos":len(stale)})
    return pd.DataFrame(rows)

# ─── Main ───────────────────────────────────────────────────────────────────────
def main():
    print("Fetching organizations...")
    orgs = fetch_orgs()
    print(f"Found {len(orgs)} orgs")

    print("Generating Permissions report...")
    df1 = report_permissions(orgs)

    print("Generating Committers report...")
    df2 = report_committers(orgs)

    print("Generating Inactive 180d report...")
    df3 = report_inactive(orgs, 180)

    print("Generating Inactive 90d report...")
    df4 = report_inactive(orgs, 90)

    print("Generating Stale Repos report...")
    df5 = report_stale_repos(orgs)

    print("Writing to Excel with embedded charts...")
    to_excel_with_charts({
        "Permissions": df1,
        "Committers": df2,
        "Inactive_180d": df3,
        "Inactive_90d": df4,
        "Stale_Repos_6mo": df5
    })

if __name__ == "__main__":
    main()